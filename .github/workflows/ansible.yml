---
name: ansible
on:
  push:
    branches:
      - stable-2.9
    paths:
      - .github/workflows/ansible.yml
jobs:
  build_ansible_base:
    name: Build ansible
    runs-on: ubuntu-20.04
    steps:
      - name: setup
        env:
          DPUT_CF: ${{ secrets.DPUT_CF }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_OWNERTRUST: ${{ secrets.SIGNING_OWNERTRUST }}
        run: |
          sudo apt -y install wget gpg gpg-agent

          sudo apt -y remove ansible || true
          sudo apt -y remove ansible-base || true
          sudo apt -y remove ansible-core || true
          sudo apt -y remove ansible-test || true
          sudo apt -y autoremove

          echo "${DPUT_CF}" > ${HOME}/.dput.cf
          echo "${SIGNING_KEY}" > ${HOME}/signing.key
          echo "${SIGNING_PASSPHRASE}" > ${HOME}/signing.passphrase
          echo "${SIGNING_OWNERTRUST}" > ${HOME}/signing.ownertrust

          gpg --import --batch --pinentry-mode loopback --passphrase-file ${HOME}/signing.passphrase ${HOME}/signing.key
          gpg --import-ownertrust --batch --pinentry-mode loopback --passphrase-file ${HOME}/signing.passphrase ${HOME}/signing.ownertrust
          gpg --list-secret-keys --keyid-format LONG

      - name: build
        env:
          DEB_NAME: ansible
          DEB_VERSION: "2.9.18"
          DEB_RELEASE: 1ppa
          DEB_DIST: groovy focal bionic
          DEB_PPA: ansible-2.9
          DEBSIGN_KEYID: ${{ secrets.DEBSIGN_KEYID }}
          OFFICIAL: yes
          TARBALL_BASE_URL: https://pypi.python.org/packages/source
          DEBUILD_ADD_OPTS: '-p"gpg --pinentry-mode loopback --passphrase-file ${HOME}/signing.passphrase"'
        run: |
          sudo apt -y install make python python-packaging python3-straight.plugin python3-docutils python-setuptools devscripts cdbs debhelper python-docutils dh-python

          cd ${HOME}
          wget ${TARBALL_BASE_URL}/${DEB_NAME:0:1}/${DEB_NAME}/${DEB_NAME}-${DEB_VERSION}.tar.gz
          rm -rf ${DEB_NAME}-${DEB_VERSION}
          tar -xzf ${DEB_NAME}-${DEB_VERSION}.tar.gz
          cd ${HOME}/${DEB_NAME}-${DEB_VERSION}
          sed -i 's/^DEBUILD = $(DEBUILD_BIN) $(DEBUILD_OPTS)$/DEBUILD_ADD_OPTS ?=\nDEBUILD = $(DEBUILD_BIN) $(DEBUILD_OPTS) $(DEBUILD_ADD_OPTS)/g' Makefile
          time make deb-src-upload
